import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
    id 'com.diffplug.spotless' version '6.16.0'
    id 'org.sonarqube' version '4.0.0.2929'
    id("org.jetbrains.kotlinx.kover") version "0.7.0-Alpha"
    id 'com.worksap.nlp.sudachi.esc'
    id 'com.worksap.nlp.sudachi.es'
}

group = 'com.worksap.nlp'
archivesBaseName = 'analysis-sudachi'
version = properties["pluginVersion"]

compileKotlin {
    compilerOptions.jvmTarget.set(JvmTarget.JVM_11)
}

compileTestKotlin {
    compilerOptions.jvmTarget.set(JvmTarget.JVM_11)
}

configurations {
    spi
}

sourceSets {
    test {
        compileClasspath += configurations.spi
        runtimeClasspath += configurations.spi
    }
    main {
        compileClasspath += configurations.spi
    }
}

dependencies {
    spi(project(':spi'))
    testImplementation('org.apache.logging.log4j:log4j-core:2.17.2')
    testImplementation('org.jetbrains.kotlin:kotlin-test-junit') {
        exclude(group: 'org.hamcrest')
    }
}

def embedVersion = tasks.register('embedVersion', Copy) {
    var esKind = sudachiEs.kind.get()
    from 'src/main/extras/plugin-descriptor.properties'
    into "build/package/${version}/${esKind.engine.kind}-${esKind.version}"
    expand([
            version: version,
            engineVersion: esKind.version,
            engineKind: esKind.engine.kind
    ])
    inputs.property("version", version)
    inputs.property("elasticSearchVersion", esKind.version)
}

def packageJars = tasks.register('packageJars', Copy) {
    from configurations.runtimeClasspath
    from tasks.jar.outputs
    var esKind = sudachiEs.kind.get()
    into "build/package/${version}/${esKind.engine.kind}-${esKind.version}"
    dependsOn tasks.jar
}

def packageSpiJars = tasks.register('packageSpiJars', Copy) {
    from configurations.spi
    var esKind = sudachiEs.kind.get()
    if (sudachiEs.hasPluginSpiSupport()) {
        into "build/package/${version}/${esKind.engine.kind}-${esKind.version}/spi"
    } else {
        into "build/package/${version}/${esKind.engine.kind}-${esKind.version}"
    }

}

def distZip = tasks.register('distZip', Zip) {
    var esKind = sudachiEs.kind.get()
    dependsOn embedVersion, packageJars, packageSpiJars
    archiveBaseName.set("${esKind.engine.kind}-${esKind.version}-$archivesBaseName")
    from("build/package/${version}/${esKind.engine.kind}-${esKind.version}", 'LICENSE', 'README.md')
}

artifacts {
    archives distZip
}

kover {
    disabledForProject = false
    useKoverTool()
}

koverReport {
    xml {
        setReportFile(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
    }
}

// See https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // watch for https://github.com/diffplug/spotless/issues/911 to be closed
    ratchetFrom 'origin/develop'
    encoding 'UTF-8' // all formats will be interpreted as UTF-8

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.txt', '*.csv'

        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        // version list: https://github.com/diffplug/spotless/tree/main/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_jdt_formatter
        eclipse('4.21.0').configFile('.formatter/eclipse-formatter.xml')
        licenseHeaderFile('.formatter/license-header')
    }
    kotlin {
        // by default the target is every '.kt' and '.kts` file in the java sourcesets
        ktfmt('0.39')
        licenseHeaderFile('.formatter/license-header')
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "WorksApplications_elasticsearch-sudachi"
        property "sonar.organization", "worksapplications"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

tasks.register("printVersionForGithubActions") {
    doLast {
        // https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#environment-files
        var esKind = sudachiEs.kind.get()

        file(System.getenv("GITHUB_ENV")).write(
                "PROJ_VERSION=${project.version}\nENGINE_VERSION=${esKind.version}\nENGINE_KIND=${esKind.engine.kind}"
        )
    }
}
