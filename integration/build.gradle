import de.undercouch.gradle.tasks.download.Download
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'java-library'
    id 'com.worksap.nlp.sudachi.es'
    id 'com.worksap.nlp.sudachi.esc'
    id 'com.worksap.nlp.sudachi.es.testenv'
    id 'com.diffplug.spotless'
    id 'org.jetbrains.kotlin.jvm'
    id 'de.undercouch.download' version '5.4.0'
}

version = properties["pluginVersion"]

compileKotlin {
    compilerOptions.jvmTarget.set(JvmTarget.JVM_11)
}

compileTestKotlin {
    compilerOptions.jvmTarget.set(JvmTarget.JVM_11)
}

dependencies {
    compileOnly(project(':'))
    compileOnly(project(':spi'))
    testCompileOnly(project(':testlib'))
    testCompileOnly(project(':subplugin'))
    testImplementation('junit:junit:4.13.1') {
        transitive = false
    }
    testImplementation('org.apache.logging.log4j:log4j-core:2.17.2')
    testImplementation('org.jetbrains.kotlin:kotlin-test-junit') {
        transitive = false
    }
}

def compileSystemDictionary = tasks.register("compileTestDictionary", JavaExec) {
    classpath = project(":spi").sourceSets.main.compileClasspath
    mainClass = "com.worksap.nlp.sudachi.dictionary.DictionaryBuilder"
    defaultCharacterEncoding = "utf-8"
    def dictRoot = rootProject.file("src/test/resources/dict").toPath()
    def matrixFile = dictRoot.resolve("matrix.def")
    def dataFile = dictRoot.resolve("lex.csv")
    def resultFile = buildDir.toPath().resolve("generated/dict/system.dict")
    args("-d", "test dictionary", "-m", matrixFile, "-o", resultFile, dataFile)
    inputs.file(matrixFile)
    inputs.file(dataFile)
    outputs.file(resultFile)
}

def downloadIcuPlugin = tasks.register('downloadIcuPlugin', Download.class) {
    String version = sudachiEs.version()
    if (sudachiEs.isEs()) {
        src("https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-icu/analysis-icu-${version}.zip")
        dest(new File(project.buildDir, "cache/analysis-icu-elasticsearch-${version}.zip"))
    } else {
        src("https://artifacts.opensearch.org/releases/plugins/analysis-icu/${version}/analysis-icu-${version}.zip")
        dest(new File(project.buildDir, "cache/analysis-icu-opensearch-${version}.zip"))
    }

    overwrite(false)
}

esTestEnv {
    def esKind = sudachiEs.kind.get()
    def packageDir = rootDir.toPath().resolve("build/package/${version}/${esKind.engine.kind}-${esKind.version}")
    bundlePath = packageDir
    systemDic = compileSystemDictionary.get().outputs.files.singleFile.toPath()
    configFile = rootProject.rootDir.toPath().resolve("src/test/resources/com/worksap/nlp/lucene/sudachi/ja/sudachi.json")
    additionalJars.add(project(":testlib").getTasksByName('jar', false).first().outputs.files.singleFile.toPath())
    addPlugin("analysis-icu", downloadIcuPlugin)
    addPlugin('sudachi-sub', project(':subplugin').getTasksByName('distZip', false).first())
}

test {
    dependsOn(
            ':packageJars',
            ':packageSpiJars',
            ':embedVersion',
            ':spi:jar',
            compileSystemDictionary,
            ':testlib:jar',
            downloadIcuPlugin,
            ':subplugin:distZip'
    )
    systemProperty("tests.security.manager", true)
    defaultCharacterEncoding = 'utf-8'
}

spotless {
    // watch for https://github.com/diffplug/spotless/issues/911 to be closed
    ratchetFrom 'origin/develop'
    encoding 'UTF-8' // all formats will be interpreted as UTF-8
    def formatter = rootProject.projectDir.toPath().resolve(".formatter")

    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.txt', '*.csv'

        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java
        // version list: https://github.com/diffplug/spotless/tree/main/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_jdt_formatter

        eclipse('4.21.0').configFile(formatter.resolve('eclipse-formatter.xml'))
        licenseHeaderFile(formatter.resolve('license-header'))
    }
    kotlin {
        // by default the target is every '.kt' and '.kts` file in the java sourcesets
        ktfmt('0.39')
        licenseHeaderFile(formatter.resolve('license-header'))
    }
}
